# http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#heat-template-version
heat_template_version: 2014-10-16


# A customization of several of the OpenStack sample templates
# at https://github.com/openstack/heat-templates/ for the NeCTAR environment
# It can currently only be run from the command line:
#     heat stack-create test -f structured_deployment.yaml -e ubuntu_pip_env.yaml


description: >
  This template demonstrates how to use OS::Heat::StructuredDeployment
  to apply config via os-apply-config. Note this requires your image to
  be built with the ntp element added (not included in the instructions
  in this repo by default, you'll have to add it and rebuild).
  This example includes the installation of the bumph required in order to get the StructuredDeployment
  resource type to work correctly on a standard NeCTAR image.


parameters:

  key_name:
    type: string
    description: Name of an existing KeyPair to enable SSH access to the instances

  instance_type:
    type: string
    description: The NeCTAR flavour the webserver is to run on
    default: m2.xsmall
    constraints:
      - allowed_values: [m2.xsmall, m2.small]
        description:
          Must be a valid NeCTAR flavour, limited to the smaller ones available

  image_name:
    type: string
    description: Name of the image to use for the instance to be created.
    default: 'Ubuntu 14.04'
    constraints:
      - allowed_values: [ 'Ubuntu 14.04', 'Ubuntu 15.04' ]
        description:
          Must be a valid NeCTAR image name, limited to the LTS Ubuntu releases

  ntp_server:
    type: string

resources:

  security_group:
    # Use this when we do not have Neutron networking.
    # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::EC2::SecurityGroup
    type: AWS::EC2::SecurityGroup
    properties:
      GroupDescription: Web server access rules.
      SecurityGroupIngress:
        - { IpProtocol: icmp, FromPort: '-1', ToPort: '-1', CidrIp : 0.0.0.0/0 }
        - { IpProtocol: tcp, FromPort: '22', ToPort: '22', CidrIp: 0.0.0.0/0 }

  boot_config:
    # This passed in via the environment file. It does the install of the software required by the config/deployment
    type: Heat::InstallConfigAgent

  config:
    # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Heat::StructuredConfig
    type: OS::Heat::StructuredConfig
    properties:
      # https://pypi.python.org/pypi/os-apply-config
      # https://launchpad.net/os-apply-config
      group: os-apply-config
      config:
        ntp:
          servers:
            - {server: {get_param: ntp_server}}

  deployment:
    # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Heat::StructuredDeployment
    type: OS::Heat::StructuredDeployment
    properties:
      config:
        get_resource: config
      server:
        get_resource: server

  notify_completion:
    # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Heat::SoftwareConfig
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: |
            #!/bin/sh
            wc_notify --data-binary '{"status": "SUCCESS", "reason": "finished run!",  "data": "some data" }'
          params:
            wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }

  cloud_init_userdata:
    # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Heat::MultipartMime
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_attr: [boot_config, config] }
      - config: { get_resource: notify_completion }

  server:
    # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Heat::Server
    type: OS::Nova::Server
    properties:
      image:
        Fn::Select:
          - { get_param: image_name }
          -
            'Ubuntu 14.04': 7313d773-3cd9-4e69-98d2-eff1f9797480
            'Ubuntu 15.04': 2ae1042a-8f8d-4f40-95c7-6d1e611714be
      flavor: {get_param: instance_type}
      key_name: {get_param: key_name}
      security_groups:
        - {get_resource: security_group}
      user_data_format: SOFTWARE_CONFIG
      user_data:
        get_resource: cloud_init_userdata

  wait_handle:
    # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Heat::WaitConditionHandle
    type: OS::Heat::WaitConditionHandle

  wait_condition:
    # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Heat::WaitCondition
    type: OS::Heat::WaitCondition
    depends_on: server
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      # we'll give it 10 minutes
      timeout: 600


outputs:

  server_ip:
    description: IP Address of server.
    value: { get_attr: [server, first_address] }

  deployment_status:
    description: Status code of configuration execution.
    value: { get_attr: [deployment, deploy_status_code] }

  deployment_stdout:
    description: Standard output captured from the configuration execution.
    value: { get_attr: [deployment, deploy_stdout] }

  deployment_stderr:
    description: Standard error captured from the configuration execution.
    value: { get_attr: [deployment, deploy_stderr] }

  wc_data:
    # Note that we can read the data returned by the call to the wait condition
    value: { get_attr: ['wait_condition', 'data'] }


