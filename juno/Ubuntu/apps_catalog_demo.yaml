# Juno Release
heat_template_version: 2014-10-16


description: Install a basic Ubuntu server with the OpenStack AppsCatalog on it.


parameters:

  key_name:
    type: string
    label: Key Name
    description: Name of an existing KeyPair to enable SSH access to the instances.
    constraints:
      - custom_constraint: nova.keypair
        description: Must be an existing KeyPair

  image_id:
    type: string
    label: Image ID
    description: Ubuntu image to be used for compute instance
    constraints:
      - custom_constraint: glance.image
        description: Must be a valid Ubuntu image

  instance_type:
    type: string
    label: Instance Type
    description: Type of instance (flavor) to be used.
    default: m2.small
    constraints:
      - custom_constraint: nova.flavor
        description: Must be a valid NeCTAR flavour

  availability_zone:
    type: string
    label: Availability Zone
    description: The NeCTAR zone in which the VM is to run (must have block storage).
    default: melbourne
    constraints:
      - allowed_values: [ monash, melbourne, QRIScloud, NCI, intersect, pawsey, sa, tasmania ]
        description: Value must be one of monash, melbourne, QRIScloud, NCI, intersect, pawsey, sa, tasmania.


resources:

  # Use this when we do not have Neutron networking.
  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::EC2::SecurityGroup
  web_security_group:
    type: AWS::EC2::SecurityGroup
    properties:
      GroupDescription: Web server access rules.
      SecurityGroupIngress:
        - {IpProtocol: icmp, FromPort: '-1', ToPort: '-1', CidrIp : 0.0.0.0/0}
        - {IpProtocol: tcp, FromPort: '22', ToPort: '22', CidrIp: 0.0.0.0/0}
        - {IpProtocol: tcp, FromPort: '80', ToPort: '80', CidrIp: 0.0.0.0/0}
        - {IpProtocol: tcp, FromPort: '443', ToPort: '443', CidrIp: 0.0.0.0/0}

  catalog_server:
    # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Nova::Server
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      availability_zone: { get_param: availability_zone }
      security_groups:
        - { get_resource: web_security_group }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v
            apt-get update
            apt-get upgrade -y
            apt-get install python-pip -y
            apt-get install git -y
            apt-get install python-dev -y
            git clone https://github.com/stackforge/apps-catalog.git
            cd apps-catalog/
            pip install -r requirements.txt
            python manage.py runserver 0.0.0.0:80 > log.txt &
            cfn-signal -e 0 -r "Command line tools server setup complete" 'WaitHandle'
          params:
            WaitHandle: { get_resource: wait_handle }

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::CloudFormation::WaitConditionHandle
  wait_handle:
    type: 'AWS::CloudFormation::WaitConditionHandle'

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::CloudFormation::WaitCondition
  wait_condition:
    type: AWS::CloudFormation::WaitCondition
    depends_on: catalog_server
    properties:
      Handle: { get_resource: wait_handle }
      Count: 1
      # we'll give it 12 minutes
      Timeout: 720


outputs:
  instance_ip:
    description: The IP address of the deployed instance.
    value: { get_attr: [catalog_server, first_address] }
