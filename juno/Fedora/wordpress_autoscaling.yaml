# http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#heat-template-version
heat_template_version: 2014-10-16


description: >
  NeCTAR sample template. This template installs an autoscaling WordPress deployment using a local MySQL database
  to store the data.
  Each wordpress instance that is spun up is an independent instance of wordpress that shares nothing with the
  other wordpress instances. So its simply a demonstrator of how to use the scaling features offered by heat.


parameters:

  # First off, the parameters that affect the environment
  key_name:
    description: Name of an existing KeyPair to enable SSH access to the instances
    type: string

  instance_type:
    description: The NeCTAR flavour the webserver is to run on
    type: string
    default: m1.small
    constraints:
      - allowed_values: [m2.xsmall, m2.small, m1.small]
        description:
          Must be a valid NeCTAR flavour with 10G drive, limited to the smaller ones available

  image_id:
     description: Must be a fedora image with cfn-tools installed on it
     default: d3bae233-a0cd-4533-a710-d7aa9de0a4b7
     type: string

  db_name:
    default: wordpress
    description: The WordPress database name
    type: string
    constraints:
      - length: { min: 6, max: 16}
        description: The database name must be between 6 to 16 characters in length.
      - allowed_pattern: '[a-zA-Z][a-zA-Z0-9]*'
        description: Must begin with a letter and contain only alphanumeric characters.

  # Then the installation specific parameters
  db_username:
    description: The WordPress database admin account username
    default: bestAdminEver
    type: string
    constraints:
      - length: { min: 6, max: 16}
        description: The user name must be between 6 to 16 characters in length.
      - allowed_pattern: '[a-zA-Z][a-zA-Z0-9]*'
        description: Must begin with a letter and contain only alphanumeric characters.


resources:

  # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Heat::RandomString
  db_password:
    type: OS::Heat::RandomString

  # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Heat::RandomString
  db_root_password:
    type: OS::Heat::RandomString

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::IAM::User
  cfn_user:
    type: AWS::IAM::User

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::IAM::AccessKey
  web_server_access_key:
    type: AWS::IAM::AccessKey
    properties:
      UserName: { get_resource:  cfn_user }

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::AutoScaling::AutoScalingGroup
  web_server_group:
    type: AWS::AutoScaling::AutoScalingGroup
    properties:
      AvailabilityZones: [melbourne, monash, QRIScloud, NCI, intersect, sa, tasmania ]
      LaunchConfigurationName: { get_resource: launch_config }
      MinSize: '1'
      MaxSize: '3'
      LoadBalancerNames:
      - { get_resource: elastic_load_blancer }
      Tags:
      - { Key: metering.server_group, Value: web_server_group }

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::AutoScaling::ScalingPolicy
  web_server_scale_up_policy:
    type: AWS::AutoScaling::ScalingPolicy
    properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: { get_resource: web_server_group }
      Cooldown: '60'
      ScalingAdjustment: '1'

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::AutoScaling::ScalingPolicy
  web_server_scale_down_policy:
    type: AWS::AutoScaling::ScalingPolicy
    properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: {get_resource: web_server_group}
      Cooldown: '60'
      ScalingAdjustment: '-1'

  # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Ceilometer::Alarm
  cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-up if the average CPU > 50% for 11 minutes
      meter_name: cpu_util
      statistic: avg
      period: '60'
      evaluation_periods: '1'
      threshold: '50'
      alarm_actions:
      - { get_attr: [web_server_scale_up_policy, AlarmUrl] }
      matching_metadata: { 'metadata.user_metadata.AutoScalingGroupName': { get_resource: 'web_server_group' } }
      comparison_operator: gt

  # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Ceilometer::Alarm
  cpu_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-down if the average CPU < 15% for 11 minutes
      meter_name: cpu_util
      statistic: avg
      period: '60'
      evaluation_periods: '1'
      threshold: '15'
      alarm_actions:
      - { get_attr: [web_server_scale_down_policy, AlarmUrl] }
      matching_metadata: { 'metadata.user_metadata.AutoScalingGroupName': { get_resource: 'web_server_group' } }
      comparison_operator: lt

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::ElasticLoadBalancing::LoadBalancer
  elastic_load_blancer:
    type: AWS::ElasticLoadBalancing::LoadBalancer
    properties:
      AvailabilityZones: [melbourne, monash, QRIScloud, NCI, intersect, sa, tasmania ]
      Listeners:
      - { LoadBalancerPort: '80', InstancePort: '80', Protocol: HTTP }
      HealthCheck: {Target: 'HTTP:80/', HealthyThreshold: '3', UnhealthyThreshold: '5', Interval: '30', Timeout: '5'}

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::AutoScaling::LaunchConfiguration
  launch_config:
    type: AWS::AutoScaling::LaunchConfiguration
    metadata:
      # See http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cfn/cfn-credentials:
              content:
                str_replace:
                  template: |
                    AWSAccessKeyId=WebAccessKey
                    AWSSecretKey=WebSecretKey
                  params:
                    WebAccessKey: { get_resource: web_server_access_key }
                    WebSecretKey: { get_attr: [ web_server_access_key, SecretAccessKey ] }
              mode: '000400'
              owner: root
              group: root
            /tmp/setup.mysql:
              content:
                str_replace:
                  template: |
                    CREATE DATABASE db_name;
                    GRANT ALL PRIVILEGES ON db_name .* TO 'db_username'@'localhost' IDENTIFIED BY 'db_password';
                    FLUSH PRIVILEGES;
                    EXIT
                  params:
                    db_password: {get_resource: db_password}
                    db_username: {get_param: db_username}
                    db_name: { get_param: db_name }
              mode: '000644'
              owner: root
              group: root
          packages:
            yum:
              mariadb: []
              mariadb-server: []
              httpd: []
              wordpress: []
          services:
            systemd:
              mysqld: { enabled: 'true', ensureRunning: 'true' }
              httpd: { enabled: 'true', ensureRunning: 'true' }
    properties:
      ImageId: { get_param: image_id }
      InstanceType: { get_param: instance_type }
      KeyName: { get_param: key_name }
      UserData:
        str_replace:
          template: |
            #!/bin/bash -v
            echo "stack_name wordpress_site stack_region" > /root/args.txt
            /opt/aws/bin/cfn-init -s stack_name -r wordpress_site --region stack_region
            # Setup MySQL root password and create a user
            mysqladmin -u root password db_root_password
            mysql -u root --password=db_root_password < /tmp/setup.mysql
            sed -i "/Deny from All/d" /etc/httpd/conf.d/wordpress.conf
            sed -i "s/Require local/Require all granted/" /etc/httpd/conf.d/wordpress.conf
            sed -i s/database_name_here/db_name/ /etc/wordpress/wp-config.php
            sed -i s/username_here/db_user/ /etc/wordpress/wp-config.php
            sed -i s/password_here/db_password/ /etc/wordpress/wp-config.php
            systemctl restart httpd.service
          params:
            stack_name:  { get_param: 'OS::stack_name' }
            stack_region: ap-southeast-1
            db_root_password: { get_resource: db_root_password }
            db_password: { get_resource: db_password }
            db_user: { get_param: db_username }
            db_name: { get_param: db_name }


outputs:

  url:
    description: The URL of the website
    value:
      str_replace:
        template: http://ip_address/wordpress
        params:
          ip_address: { get_attr: [elastic_load_blancer, DNSName]}
