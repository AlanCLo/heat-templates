# http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#heat-template-version
heat_template_version: 2014-10-16

description: >
  This template creates a sigle instance running wordpress, and a monitor that will kill and start a new instance if
  it finds that the running instance is not being responsive enough.
  Note that it uses a deprecated resource type (HARestarter).


parameters:

 # First off, the parameters that affect the environment
  key_name:
    description: Name of an existing KeyPair to enable SSH access to the instances
    type: string

  instance_type:
    description: The NeCTAR flavour the webserver is to run on
    type: string
    default: m2.xsmall
    constraints:
      - allowed_values: [m2.xsmall, m2.small]
        description:
          Must be a valid NeCTAR flavour with 10G drive, limited to the smaller ones available

  image_id:
     description: A NeCTAR fedora image
     type: string
     default: d3bae233-a0cd-4533-a710-d7aa9de0a4b7

  # Then the installation specific parameters
  db_name:
    default: wordpress
    description: The WordPress database name
    type: string
    constraints:
      - length: { min: 6, max: 16}
        description: The database name must be between 6 to 16 characters in length.
      - allowed_pattern: '[a-zA-Z][a-zA-Z0-9]*'
        description: Must begin with a letter and contain only alphanumeric characters.
        
  db_username:
    description: The WordPress database admin account username
    default: bestAdminEver
    type: string
    constraints:
      - length: { min: 6, max: 16}
        description: The user name must be between 6 to 16 characters in length.
      - allowed_pattern: '[a-zA-Z][a-zA-Z0-9]*'
        description: Must begin with a letter and contain only alphanumeric characters.

  hup_poll_interval:
    default: '1'
    type: string
    description: Interval for cfn-hup


resources:

  # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Heat::RandomString
  db_password:
    type: OS::Heat::RandomString

  # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Heat::RandomString
  db_root_password:
    type: OS::Heat::RandomString

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::IAM::User
  cfn_user:
    type: AWS::IAM::User
    properties:
      Policies: [ { get_resource: access_policy }]

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::IAM::AccessKey
  web_server_access_key:
    type: AWS::IAM::AccessKey
    properties:
      UserName: { get_resource: cfn_user }

  # Deprecated!
  # http://docs.openstack.org/hot-reference/content/OS__Heat__HARestarter.html
  web_server_restart_policy:
    type: OS::Heat::HARestarter
    properties:
      InstanceId: { get_resource: wordpress_site }

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::CloudWatch::Alarm
  http_failure_alarm:
    type: AWS::CloudWatch::Alarm
    properties:
      AlarmDescription: Restart the wordpress_site if httpd fails > 3 times in 10 minutes
      MetricName: ServiceFailure
      Namespace: system/linux
      Statistic: SampleCount
      Period: 300
      EvaluationPeriods: 1
      Threshold: 2
      AlarmActions:
      - { get_attr: [web_server_restart_policy, AlarmUrl] }
      ComparisonOperator: GreaterThanThreshold

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html# AWS::EC2::Instance
  wordpress_site:
    type: AWS::EC2::Instance
    metadata:
      # See http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cfn/cfn-credentials:
              content:
                str_replace:
                  template: |
                    AWSAccessKeyId=WebAccessKey
                    AWSSecretKey=WebSecretKey
                  params:
                    WebAccessKey: { get_resource: web_server_access_key }
                    WebSecretKey: { get_attr: [ web_server_access_key, SecretAccessKey ] }
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content:
                str_replace:
                  template: |
                    [main]
                    stack=StackName
                    credential-file=/etc/cfn/cfn-credentials
                    region=ap-southeast-1
                    interval=Interval
                params:
                  StackName: { get_param: 'OS::stack_name' }
                  Interval: { get_param: hup_poll_interval }
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/notify-on-httpd-restarted:
              content: |
                #!/bin/sh
                /opt/aws/bin/cfn-push-stats --service-failure
              mode: '000700'
              owner: root
              group: root
            /tmp/cfn-hup-crontab.txt:
              content: |
                MAIL=""
                * * * * * /opt/aws/bin/cfn-hup -f
              mode: '000600'
              owner: root
              group: root
            /tmp/setup.mysql:
              content:
                str_replace:
                  template: |
                    CREATE DATABASE db_name;
                    GRANT ALL PRIVILEGES ON db_name .* TO 'db_username'@'localhost' IDENTIFIED BY 'db_password';
                    FLUSH PRIVILEGES;
                    EXIT
                  params:
                    db_name: { get_param: db_name }
                    db_password: { get_resource: db_password }
                    db_username: { get_param: db_username }
              mode: '000644'
              owner: root
              group: root
            /etc/cfn/hooks.conf:
              content: |
                [cfn-http-restarted]
                triggers=service.restarted
                path=Resources.wordpress_site.Metadata
                action=/etc/cfn/notify-on-httpd-restarted
                runas=root
              mode: '000400'
              owner: root
              group: root
          packages:
            yum:
              cronie: []
              mariadb: []
              mariadb-server: []
              httpd: []
              wordpress: []
          services:
            systemd:
              mysqld: { enabled: true, ensureRunning: true }
              httpd: { enabled: true, ensureRunning: true }
              crond: { enabled: true, ensureRunning: true }
    properties:
      ImageId: { get_param: image_id }
      InstanceType: { get_param:  instance_type }
      KeyName: { get_param:  key_name }
      UserData:
        str_replace:
          template: |
            #!/bin/bash -v
            # Helper function
            function error_exit
            {
              /opt/aws/bin/cfn-signal -e 1 -r "$1" 'wait_handle'
              exit 1
            }
            echo "stack_name wordpress_site stack_region" > /root/args.txt
            /opt/aws/bin/cfn-init -s stack_name -r wordpress_site --access-key access_key --secret-key secret_key --region stack_region || error_exit 'Failed to run cfn-init'
            # Setup database root password and create a user
            mysqladmin -u root password db_root_password  || error_exit 'Failed to initialize root password'
            mysql -u root --password=db_root_password < /tmp/setup.mysql  || error_exit 'Failed to create database.'
            sed -i "/Deny from All/d" /etc/httpd/conf.d/wordpress.conf
            sed -i "s/Require local/Require all granted/" /etc/httpd/conf.d/wordpress.conf
            sed -i s/database_name_here/db_name/ /etc/wordpress/wp-config.php
            sed -i s/username_here/db_user/ /etc/wordpress/wp-config.php
            sed -i s/password_here/db_password/ /etc/wordpress/wp-config.php
            systemctl restart httpd.service
            # install cfn-hup crontab
            crontab /tmp/cfn-hup-crontab.txt
            /opt/aws/bin/cfn-signal -e 0 -r "Wiki server setup complete" 'wait_handle'
          params:
            stack_name:  { get_param: 'OS::stack_name' }
            stack_region: ap-southeast-1
            access_key: { get_resource: web_server_access_key }
            secret_key: { get_attr: [web_server_access_key, SecretAccessKey] }
            wait_handle: { get_resource: wait_handle }
            db_root_password: { get_resource: db_root_password }
            db_password: { get_resource: db_password }
            db_user: { get_param: db_username }
            db_name: { get_param: db_name }

  access_policy:
    # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Heat::AccessPolicy
    type: OS::Heat::AccessPolicy
    properties:
      AllowedResources: [ "wordpress_site" ]

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::CloudFormation::WaitConditionHandle
  wait_handle:
    type: 'AWS::CloudFormation::WaitConditionHandle'

  # http://docs.openstack.org/developer/heat/template_guide/cfn.html#AWS::CloudFormation::WaitCondition
  wait_condition:
    type: AWS::CloudFormation::WaitCondition
    depends_on: wordpress_site
    properties:
      Handle: { get_resource: wait_handle }
      Count: 1
      # Give it 11 minutes: there's a lot going on...
      Timeout: 700


outputs:

  url:
    description: The URL of the website
    value:
      str_replace:
        template: http://ip_address/wordpress
        params:
          ip_address: { get_attr: [wordpress_site, PublicIp] }