# http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#heat-template-version
heat_template_version: 2014-10-16


description: >
  NeCTAR sample template to install WordPress on a single instance with a local MySQL database
  to store the data.


parameters:

  # First off, the parameters that affect the environment
  key_name:
    description: Name of an existing KeyPair to enable SSH access to the instances
    type: string

  instance_type:
    description: The NeCTAR flavour the webserver is to run on
    type: string
    default: m2.xsmall
    constraints:
      - allowed_values: [m2.xsmall, m2.small]
        description:
          Must be a valid NeCTAR flavour with 10G drive, limited to the smaller ones available

  image_id:
     description: A NeCTAR fedora image
     type: string
     default: d3bae233-a0cd-4533-a710-d7aa9de0a4b7

  # Then the installation specific parameters

  db_name:
    default: wordpress
    description: The WordPress database name
    type: string
    constraints:
      - length: { min: 6, max: 16}
        description: The database name must be between 6 to 16 characters in length.
      - allowed_pattern: '[a-zA-Z][a-zA-Z0-9]*'
        description: Must begin with a letter and contain only alphanumeric characters.

  db_username:
    description: The WordPress database admin account username
    default: bestAdminEver
    type: string
    constraints:
      - length: { min: 6, max: 16}
        description: The user name must be between 6 to 16 characters in length.
      - allowed_pattern: '[a-zA-Z][a-zA-Z0-9]*'
        description: Must begin with a letter and contain only alphanumeric characters.


resources:

  # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Heat::RandomString
  db_password:
    type: OS::Heat::RandomString

  # http://docs.openstack.org/developer/heat/template_guide/openstack.html#OS::Heat::RandomString
  db_root_password:
    type: OS::Heat::RandomString

  # Creating a security group is possible: but it does eat into the number of groups that you are limited to (10)
  security_group:
    # http://docs.openstack.org/hot-reference/content/AWS__EC2__SecurityGroup.html
    type: AWS::EC2::SecurityGroup
    properties:
      GroupDescription: Enable HTTP access via port 80 plus SSH and ICMP access
      SecurityGroupIngress:
        -
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  wordpress_site:
    # http://docs.openstack.org/hot-reference/content/AWS__EC2__Instance.html
    type: AWS::EC2::Instance
    metadata:
      # See http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/setup.mysql:
              content:
                str_replace:
                  template: |
                    CREATE DATABASE db_name;
                    GRANT ALL PRIVILEGES ON db_name .* TO 'db_user'@'localhost' IDENTIFIED BY 'db_password';
                    FLUSH PRIVILEGES;
                    EXIT
                  params:
                    db_password: {get_resource: db_password}
                    db_user: {get_param: db_username}
                    db_name: { get_param: db_name }
              mode: '000644'
              owner: root
              group: root
          packages:
            yum:
              mariadb: []
              mariadb-server: []
              httpd: []
              wordpress: []
          services:
            systemd:
              mysqld: {enabled: 'true', ensureRunning: 'true'}
              httpd: {enabled: 'true', ensureRunning: 'true'}
    properties:
      ImageId: { get_param: image_id }
      InstanceType: { get_param:  instance_type }
      KeyName: { get_param:  key_name }
      # the following will break if you have maxed out your security group limit (10).
      SecurityGroups: [ { get_resource: security_group } ]
      # the following is written to /var/lib/cloud/data/cfn-userdata
      # note the call to cfn-init which causes the AWS::CloudFomration::Init to be actioned
      UserData:
        str_replace:
          template: |
            #!/bin/bash -v
            echo "stack_name wordpress_site stack_region" > /root/args.txt
            /opt/aws/bin/cfn-init -s stack_name -r wordpress_site --region stack_region
            # Setup MySQL root password and create a user
            mysqladmin -u root password db_root_password
            mysql -u root --password=db_root_password < /tmp/setup.mysql
            sed -i "/Deny from All/d" /etc/httpd/conf.d/wordpress.conf
            sed -i "s/Require local/Require all granted/" /etc/httpd/conf.d/wordpress.conf
            sed -i s/database_name_here/db_name/ /etc/wordpress/wp-config.php
            sed -i s/username_here/db_user/ /etc/wordpress/wp-config.php
            sed -i s/password_here/db_password/ /etc/wordpress/wp-config.php
            systemctl restart httpd.service
          params:
            stack_name:  { get_param: 'OS::stack_name' }
            stack_region: ap-southeast-1
            db_root_password: { get_resource: db_root_password }
            db_password: { get_resource: db_password }
            db_user: { get_param: db_username }
            db_name: { get_param: db_name }


outputs:

  webste_url:
    description: The URL of the wordpress site
    value:
      str_replace:
        template: http://IpAddress/wordpress
        params:
          IpAddress: { get_attr: [wordpress_site, PublicIp]}
