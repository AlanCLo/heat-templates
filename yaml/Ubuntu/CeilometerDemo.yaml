HeatTemplateFormatVersion: '2012-12-12'
# This is a template that aims to demonstrate the connection between Heat and Ceilometer.


Description: "Creates a Ceilometer alarmed stress tester application: and another application that is notified when the alarms fire."


Parameters:

  KeyName:
    Description: Name of an existing Nectar KeyPair to enable SSH access to the instances
    Type: String

  InstanceType:
    Description: The NeCTAR flavours the applications are to run on
    Type: String
    Default: m1.small
    AllowedValues: [m1.small, m1.medium, m1.large, m1.xlarge, m1.xxlarge]
    ConstraintDescription: must be a valid NeCTAR flavour.

  ImageName:
    Type: String
    Description: Name of the image to use for the instances to be created
    Default: 'NeCTAR Ubuntu 13.10 (Saucy) amd64'
    AllowedValues: ['NeCTAR Ubuntu 13.10 (Saucy) amd64', 'NeCTAR Ubuntu 14.04 (Trusty) amd64']


Mappings:

  InstanceId:
   'NeCTAR Ubuntu 13.10 (Saucy) amd64': {ImageId: a6dcb912-8307-4d35-861f-3e41ce994666}
   'NeCTAR Ubuntu 14.04 (Trusty) amd64': {ImageId: 26955e70-9da0-44d4-b3f8-e5276e989fdb}


Resources:

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: {'Fn::GetAZs': ''}
      LaunchConfigurationName: {Ref: LaunchConfig}
      MinSize: '1'
      MaxSize: '2'
      Tags:
      - {Key: metering.server_group, Value: WebServerGroup}

  CPUAlarmHigh:
    Type: OS::Ceilometer::Alarm
    Properties:
      description: Scale-up if the average CPU > 30% for 10 minute
      meter_name: cpu_util
      statistic: avg
      period: '600'
      evaluation_periods: '1'
      threshold: '30'
      ok_actions:
        -
          Fn::Replace:
          - IpAddress: {'Fn::GetAtt': [AlarmMonitor, PublicIp]}
          - http://IpAddress/8080/alarm/all_ok
      insufficient_data_actions:
        -
          Fn::Replace:
          - IpAddress: {'Fn::GetAtt': [AlarmMonitor, PublicIp]}
          - http://IpAddress/8080/alarm/insufficient_data
      alarm_actions:
        -
          Fn::Replace:
          - IpAddress: {'Fn::GetAtt': [AlarmMonitor, PublicIp]}
          - http://IpAddress/8080/alarm/scale_up_now
      matching_metadata: {'metadata.user_metadata.groupname': {Ref: 'WebServerGroup'}}
      comparison_operator: gt

  CPUAlarmLow:
    Type: OS::Ceilometer::Alarm
    Properties:
      description: Scale-down if the average CPU < 15% for 1 minute
      meter_name: cpu_util
      statistic: avg
      period: '60'
      evaluation_periods: '1'
      threshold: '15'
      alarm_actions:
        -
          Fn::Replace:
          - IpAddress: {'Fn::GetAtt': [AlarmMonitor, PublicIp]}
          - http://IpAddress/8080/alarm/scale_down
      matching_metadata: {'metadata.user_metadata.groupname': {Ref: 'WebServerGroup'}}
      comparison_operator: lt

  # the following will break if you have maxed out your security group limit (10).
  WebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Enable HTTP access via port 8080 plus SSH access"
      SecurityGroupIngress:
        -
          IpProtocol: "icmp"
          FromPort: "-1"
          ToPort: "-1"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "8080"
          ToPort: "8080"
          CidrIp: "0.0.0.0/0"

  StressServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: {'Fn::GetAZs': ''}
      LaunchConfigurationName: {Ref: LaunchConfig}
      MinSize: '1'
      MaxSize: '1'
      Tags:
      - {Key: metering.server_group, Value: StressServerGroup}

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Fn::FindInMap:
        - InstanceId
        - {Ref: ImageName}
        - ImageId
      InstanceType:  {Ref: InstanceType}
      KeyName: {Ref: KeyName}
      SecurityGroups: [{Ref: WebServerSecurityGroup}]
      UserData: |
        #!/bin/bash -v
        apt-get update && sudo apt-get -y upgrade

        apt-get -y install git

        # time to sit back and smoke that cigar...
        apt-get -y install maven

        # then java 8
        apt-get -y install python-software-properties

        add-apt-repository ppa:webupd8team/java -y
        apt-get -q -y update

        # from http://askubuntu.com/questions/190582/installing-java-automatically-with-silent-option
        echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections
        echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections

        apt-get install oracle-java8-installer -y

        # set it as the default..
        apt-get install oracle-java8-set-default

        #install stress
        apt-get -y install stress

        git clone https://github.com/MartinPaulo/SparkStressTester.git
        cd SparkStressTester
        ./start.sh

  AlarmMonitor:
    Type: AWS::EC2::Instance
    Properties:
      # an ubuntu image with heat-cfntools installed
      ImageId:
        Fn::FindInMap:
        - InstanceId
        - {Ref: ImageName}
        - ImageId
      InstanceType: {Ref: InstanceType}
      KeyName: {Ref: KeyName}
      SecurityGroups: [{Ref: WebServerSecurityGroup}]
      # the following is written to /var/lib/cloud/data/cfn-userdata
      # note the call to cfn-init which causes the AWS::CloudFomration::Init to be actioned
      UserData: |
        #!/bin/bash -v
        apt-get update && sudo apt-get -y upgrade

        apt-get -y install git

        # time to sit back and smoke that cigar...
        apt-get -y install maven

        # then java 8
        apt-get -y install python-software-properties

        add-apt-repository ppa:webupd8team/java -y
        apt-get -q -y update

        # from http://askubuntu.com/questions/190582/installing-java-automatically-with-silent-option
        echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections
        echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections

        apt-get install oracle-java8-installer -y

        # set it as the default..
        apt-get install oracle-java8-set-default

        git clone https://github.com/MartinPaulo/SparkProject.git
        cd SparkProject
        ./start.sh


Outputs:

  MonitorURL:
    Description: The URL of the montitoring website
    Value:
      Fn::Replace:
      - IpAddress: {'Fn::GetAtt': [AlarmMonitor, PublicIp]}
      - http://IpAddress:8080/

  WebsiteURL:
    Description: URL for the stressed server
    Value:
      Fn::Replace:
      - IpAddress: {'Fn::GetAtt': [StressServerGroup, InstanceList]}
      - http://IpAddress:8080/
